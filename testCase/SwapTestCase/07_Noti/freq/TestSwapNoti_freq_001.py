#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# @Date    : 2021/11/10 5:26 下午
# @Author  : HuiQing Yu

from common.mysqlComm import mysqlComm as mysqlClient

import pytest, allure, random, time
from common.SwapServiceWS import user01 as ws_user01
from common.SwapServiceAPI import user01 as api_user01
from config.conf import DEFAULT_CONTRACT_CODE
from tool.SwapTools import SwapTool
from config.case_content import epic, features


@allure.epic(epic[1])
@allure.feature(features[6]['feature'])
@allure.story(features[6]['story'][3])
@allure.tag('Script owner : 余辉青', 'Case owner : 吉龙')
@pytest.mark.stable
class TestSwapNoti_freq_001:
    ids = ['TestSwapNoti_freq_001']
    params = [{'case_name':'增加20档','size':'size_20','data_type':'incremental'}]
    contract_code = DEFAULT_CONTRACT_CODE

    @classmethod
    def setup_class(cls):
        with allure.step('挂盘21档更新深度'):
            cls.currentPrice = SwapTool.currentPrice()
            for i in range(22):
                api_user01.swap_order(contract_code=cls.contract_code,direction='buy',price=round(cls.currentPrice*(1-i*0.01),2))
                api_user01.swap_order(contract_code=cls.contract_code,direction='sell',price=round(cls.currentPrice*(1+i*0.01),2))
            pass

    @classmethod
    def teardown_class(cls):
        with allure.step('恢复环境-撤单'):
            api_user01.swap_cancelall(contract_code=cls.contract_code)
            pass

    @pytest.mark.parametrize('params', params, ids=ids)
    def test_execute(self, params):
        allure.dynamic.title(params['case_name'])
        with allure.step('睡眠：等待深度更新(2秒)'):
            time.sleep(2)
            pass
        with allure.step('操作：执行深度sub订阅'):
            subs = {
                      "sub": "market.{}.depth.{}.high_freq".format(self.contract_code,params['size']),
                      "data_type":"{}".format(params['data_type']),
                      "id": "id generated by client"
                    }
            flag = False
            # 重试3次未返回预期结果则失败
            for i in range(3):
                result = ws_user01.swap_sub(subs=subs,keyword='asks')
                if 'tick' in result:
                    if result['tick']['asks'] and result['tick']['bids']:
                        flag = True
                        break
                time.sleep(1)
                print(f'未返回预期结果，第{i+1}次重试………………………………')
            assert flag, '未返回预期结果'
            pass
        with allure.step('验证：深度asks,bids只有20档'):
            assert len(result['tick']['asks']) == 20
            assert len(result['tick']['bids']) == 20
            pass

if __name__ == '__main__':
    pytest.main()